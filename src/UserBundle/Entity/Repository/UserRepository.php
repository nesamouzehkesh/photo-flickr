<?php

namespace UserBundle\Entity\Repository;

use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\EntityRepository;
use UserBundle\Entity\User;
use UserBundle\Entity\Role;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
    /**
     * Get all users
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getUser($id)
    {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.deleted = 0 AND u.id = :id')
            ->setParameter('id', $id);
            
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    /**
     * Get all users
     * 
     * @param type $order
     * @param type $readOnly
     * @return type
     */
    public function getUsers()
    {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.roles', 'r')
            ->where('u.deleted = 0 AND r.role = :role')
            ->setParameter('role', Role::ROLE_USER);
            
        return $qb->getQuery();
    }

    /**
     * 
     * @param type $username
     * @return type
     * @throws UsernameNotFoundException
     */
    public function hasUserByUsername($username)
    {
        $qb = $this->createQueryBuilder('u')
            ->select('u.id')
            ->where('u.username = :username AND u.deleted = 0')
            ->setParameter('username', $username);
                
        $result = $qb->getQuery()->getScalarResult();
        
        return reset($result)? true : false;
    }
    
    /**
     * 
     * @param \UserBundle\Entity\Repository\User $user
     * @param type $username
     * @return type
     */
    public function canUserUseUsername(User $user, $username)
    {
        $qb = $this->createQueryBuilder('u')
            ->select('u.id')
            ->where('u.username = :username AND u.id != :userId ')
            ->setParameter('username', $username)
            ->setParameter('userId', $user->getId());
                
        $result = $qb->getQuery()->getScalarResult();
        
        return reset($result)? false : true;
    }    
    
    /**
     * 
     * @param type $username
     * @return type
     * @throws UsernameNotFoundException
     */
    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.roles', 'r')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin AcmeUserBundle:User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }
        
        return $user;
    }
}
